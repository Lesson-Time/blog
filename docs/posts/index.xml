<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on TO-ON Developer Blog</title>
    <link>https://lesson-time.github.io/blog/posts/</link>
    <description>Recent content in Posts on TO-ON Developer Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 28 Mar 2018 09:08:18 +0900</lastBuildDate>
    
	<atom:link href="https://lesson-time.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes の pods を更新する方法</title>
      <link>https://lesson-time.github.io/blog/posts/how-to-update-k8s-pods/</link>
      <pubDate>Wed, 28 Mar 2018 09:08:18 +0900</pubDate>
      
      <guid>https://lesson-time.github.io/blog/posts/how-to-update-k8s-pods/</guid>
      <description>ローカルからDocker image を Build して、 GCRにpush, k8sのアプリケーションを変更する方法を記述します。
Build docker build --rm -t asia.gcr.io/sample-project/example:v1 .  --rm はビルド成功後中間コンテナを削除するオプションです。-tはタグをイメージにつけることができます。
この場合は v1を asia.gcr.io/sample-project/example に付与しています。
Test (RUN) docker run --rm -it -P asia.gcr.io/sample-project/example:v1 .  インタラクティブなプロセスでは、コンテナのプロセスに対して tty を割り当てるために、 -i -t を一緒に使う必要があります。
Upload gcloud docker -- push asia.gcr.io/sample-project/example:v1  gcloud をインストールしている必要があります。
Deploy kubectl set image deployment/example example=asia.gcr.io/sample-project/example:v1 -n your-namespace kubectl rollout status deployment/example -n your-namespace  set image で deployment に新しいイメージを付与して、 rollout コマンドでpodの更新をします。</description>
    </item>
    
    <item>
      <title>kubernetes の node のバージョンアップをダウンタイムなしで実行する</title>
      <link>https://lesson-time.github.io/blog/posts/node-pool-update/</link>
      <pubDate>Thu, 15 Feb 2018 15:16:31 +0900</pubDate>
      
      <guid>https://lesson-time.github.io/blog/posts/node-pool-update/</guid>
      <description>node pool の概要はこちらです。
https://cloud.google.com/container-engine/docs/node-pools?hl=ja
今回は1.6.4から1.6.6にバージョンアップをします。
さて、kubernetes の node pool のバージョンアップをやるには
1, 新しい node pool を作成する。
2, 古い node に対して unschedule を設定する。
3, pods を再構築して新しい node に乗るかを確認する。
4, すべての pods を乗せ変える。
1, 新しい node pool を作成する。 コマンドはこちらです。
$ gcloud container node-pools create NODE_NAME --cluster=CLUSTER_NAME --machine-type=n1-standard-1 --disk-size=100 --num-nodes=2 --zone=asia-east1-a  zone に指定する asia-east1-a は cluster のzoneです。
machine type とかは適宜変えましょう。
node pool の一覧はこのようにして確かめれます。
$ gcloud container node-pools list --cluster=CLUSTER_NAME NAME MACHINE_TYPE DISK_SIZE_GB NODE_VERSION pool1 n1-standard-1 100 1.</description>
    </item>
    
    <item>
      <title>Kubernetes で ingress controller を使って https (TLS) 接続をするチュートリアル</title>
      <link>https://lesson-time.github.io/blog/posts/tutorial-for-k8s-tls-setting/</link>
      <pubDate>Wed, 07 Feb 2018 18:57:41 +0900</pubDate>
      
      <guid>https://lesson-time.github.io/blog/posts/tutorial-for-k8s-tls-setting/</guid>
      <description>弊社ではKubernetesでDocker Containerを管理しています。
レッスンタイムもそうですが、常時HTTPS接続をするために内部にnginx proxy の役割をするServiceを使っていました。
ingress を使うと何がメリットかというと
- 一つのingressで複数Serviceにまたがった設定ができる。
- Serviceとして管理しないので分けて考えれる
- Google 推奨の構成
といったところですね。
このチュートリアルでは
1, ingressを使ってアプリケーションを公開する
2, TLSの設定をして、https接続する。
の二つを行いたいと思います。
1, ingressを使ってアプリケーションを公開する 1.1, サービスを立ち上げる まずはingressを使わないでサービスを立ち上げれるかチェックします。
こちらの公式ページがとてもわかりやすいのですが、Deployment から exposeして外部に公開してもいいし、Serviceを記述して公開してもいいです。
例えばこういうDeploymentがあるとします。
sandboxというnamespaceに一つアプリケーションを8080で公開する記述がされています。
Rails だと3000ですね。
apiVersion: apps/v1beta1 kind: Deployment metadata: name: test-app namespace: sandbox spec: replicas: 1 revisionHistoryLimit: 3 template: metadata: namespace: sandbox labels: run: test-app version: latest spec: containers: - name: test-app image: asia.gcr.io/project-id/image_name:latest ports: - containerPort: 8080  Terminal で</description>
    </item>
    
    <item>
      <title>GCPで 「Request had insufficient authentication scopes.」と怒られた時の対処法</title>
      <link>https://lesson-time.github.io/blog/posts/insufficient-authentication-scopes/</link>
      <pubDate>Wed, 07 Feb 2018 18:49:38 +0900</pubDate>
      
      <guid>https://lesson-time.github.io/blog/posts/insufficient-authentication-scopes/</guid>
      <description>GCEでオープンソースの Drone.io を動かしていて、そこから GKE にアクセスしています。
今回新しく cluster を作成して、そこにdroneのGCEからアクセスしようと思ったのですが、以下のように怒られました。
$ gcloud container clusters get-credentials test-cluster (gcloud.container.clusters.get-credentials) ResponseError: code=403, message=Request had insufficient authentication scopes.&amp;quot;  色々探してみたのですが、このエラーは簡単にいうと パーミッションがない ということです。
authentication scopes というのはサービスアカウントやユーザーによってGCPのAPIへのアクセス権がないということに等しい（と思います）
今回は一旦VMを止めて、編集から上記の Cloud API access scopes を適切なものに変更して直りました。</description>
    </item>
    
  </channel>
</rss>